

'use client'

import React, { useState } from 'react'
import { useForm, SubmitHandler } from "react-hook-form"
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { signInWithEmailAndPassword } from 'firebase/auth'
import { auth } from '../../../lib/firebase'
import { useAppsContext } from '@/context/AppContext'
import { QRCodeSVG } from 'qrcode.react';

interface FormValues {
    email: string;
    password: string;
}

type Inputs = {
  email: string
  password: string
  totpCode: string
}

const Login = () => {
  const router = useRouter();
  const { setIsUserAccount } = useAppsContext();
  const [showTOTP, setShowTOTP] = useState<boolean>(false);
  const [setupRequired, setSetupRequired] = useState<boolean>(false);
  const [qrCodeData, setQrCodeData] = useState<string>('');
  const [totpSecret, setTotpSecret] = useState<string>('');
  const [userId, setUserId] = useState<string>('');

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<Inputs>();

  const onSubmit: SubmitHandler<Inputs> = async (data) => {
    try {
      const response = await fetch('/api/auth/initial_auth', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: data.email, password: data.password }),
      });

      if (response.ok) {
        const result = await response.json();
        setUserId(result.userId);

        if (result.requireTwoFactor) {
          if (result.setupRequired) {
            setSetupRequired(true);
            setTotpSecret(result.totpSecret);
            const qrCodeUrl = `otpauth://totp/YourApp:${data.email}?secret=${result.totpSecret}&issuer=YourApp`;
            setQrCodeData(qrCodeUrl);
          } else {
            setShowTOTP(true);
          }
        } else {
          await finalizeLogin(result.userId, data.email, data.password);
        }
      } else {
        throw new Error('初期認証に失敗しました。');
      }
    } catch (error) {
      console.error("認証エラー:", error);
      alert(error instanceof Error ? error.message : "不明なエラーが発生しました。");
    }
  };

  const finalizeLogin = async (userId: string, email: string, password: string) => {
    try {
      await signInWithEmailAndPassword(auth, email, password);
      const response = await fetch('/api/auth/complete_login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId }),
      });
      if (response.ok) {
        const result = await response.json();
        handleSuccessfulLogin(result.organizationId);
      } else {
        throw new Error('ログイン処理に失敗しました。');
      }
    } catch (error) {
      console.error("ログインエラー:", error);
      alert(error instanceof Error ? error.message : "不明なエラーが発生しました。");
    }
  };

  const handleSuccessfulLogin = (organizationId: string) => {
    setIsUserAccount(false);
    router.push(`/client-view/${organizationId}/Report`);
  };

  const verifyTOTP = async (totpCode: string) => {
    try {
      const response = await fetch('/api/auth/verify_totp', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, totpCode }),
      });
      if (response.ok) {
        const result = await response.json();
        await finalizeLogin(userId, result.email, result.password);
      } else {
        throw new Error('TOTP検証に失敗しました。');
      }
    } catch (error) {
      console.error("2段階認証エラー:", error);
      alert("2段階認証に失敗しました。");
    }
  };

  return (
    <div>
      <h1>ログイン(組織)</h1>
      {!showTOTP && !setupRequired ? (
        <form onSubmit={handleSubmit(onSubmit)}>
          <label htmlFor="email">メールアドレス</label>
          <input id="email" {...register("email", { required: "メールアドレスは必須です" })} />
          {errors.email && <span>{errors.email.message}</span>}
          <label htmlFor="password">パスワード</label>
          <input id="password" type="password" {...register("password", { required: "パスワードは必須です" })} />
          {errors.password && <span>{errors.password.message}</span>}
          <button type="submit">ログイン</button>
        </form>
      ) : setupRequired ? (
        <div>
          <h2>TOTP設定</h2>
          <p>以下のQRコードをスキャンして認証アプリに追加してください。</p>
          <QRCodeSVG value={qrCodeData} />
          <p>または、以下のコードを手動で入力してください: {totpSecret}</p>
          <form onSubmit={handleSubmit(data => verifyTOTP(data.totpCode))}>
            <label htmlFor="totpCode">認証コード</label>
            <input id="totpCode" {...register("totpCode", { required: "認証コードは必須です" })} />
            {errors.totpCode && <span>{errors.totpCode.message}</span>}
            <button type="submit">設定を完了</button>
          </form>
        </div>
      ) : (
        <form onSubmit={handleSubmit(data => verifyTOTP(data.totpCode))}>
          <label htmlFor="totpCode">認証コード</label>
          <input id="totpCode" {...register("totpCode", { required: "認証コードは必須です" })} />
          {errors.totpCode && <span>{errors.totpCode.message}</span>}
          <button type="submit">認証</button>
        </form>
      )}
      <Link href="/clients/register">新規登録ページへ</Link>
    </div>
  );
};

export default Login;
